From ee7f5956a024f313193f69e7d9df5dbd7af4397c Mon Sep 17 00:00:00 2001
From: Harm Hanemaaijer <fgenfb@yahoo.com>
Date: Sat, 21 Feb 2015 08:51:57 +0100
Subject: [PATCH 1/3] Disable use of DMA fb_copyarea for console scrolling on
 Pi 2

By default, fb_copyarea is accelerated using DMA on the Raspberry Pi
and this brings improved performance for console text scrolling on
first generation Raspberry Pi models when running in Turbo
overclocking mode, which uses a core frequency of 500 MHz, as
opposed to 250 MHz for lower overclocking settings.

However, on a Raspberry Pi with the medium overclocking preset using
a 250 MHz core frequency, optimized software redraw is slightly faster
than DMA scrolling, with a performance advantage of 6% at 32bpp and 2%
at 16bpp.

On the Raspberry Pi 2, the benefit of using DMA further diminishes.
Disabling the use of accelerated fb_copyarea, which triggers the use
of optimized redraw when scrolling, results in clearly better
performance. The gains are greatest at 16bpp and high display
resolutions like 1920x1080. At 1920x1080, using a console text
throughput test, the performance gain ranges from 11% at 32bpp to 26%
at 16bpp. When a concurrent CPU-intensive task is introduced, the gain
increases from a range of 16% at 32bpp to 32% at 16bpp.

When using Raspberry Pi 2 with aggressive overclocking settings (1100
MHz CPU, 550 MHz L2 cache and 483 MHz SDRAM), the advantage dimishes,
with the gain ranging from -5% at 32bpp to 11% at 16bpp. When a
concurrent CPU-intensive task is introduced, the gain increases from a
range of 3% at 32bpp to 19% at 16bpp.

At the lower resolution of 1280x1024, the performance gain is less. On
an overclocked Raspberry Pi 2, the performance gain ranges from -6% at
32bpp to 7% at 16bpp. When a concurrent CPU-intensive task is
introduced, the gain increases from a range of -1% at 32bpp to 18% at
16bpp.

To explain why redraw can be preferable to DMA for scrolling, consider
that copyarea uses approximately twice the amount of memory bandwidth
because of the need to read the source region. Redraw only writes to
the destination region, saving bandwidth. On the Raspberry Pi 2, with
its increased CPU speed and parallellism, memory bandwidth is more of
a bottleneck and optimized software redraw performs better.

An analogy between the X server and the kernel can also be put
forward. The Raspberry Pi 2 benefits from X server graphics operations
being executed on one CPU, leaving other CPUs free for applications
use. In a similar way using software redraw in the kernel works better
on the Raspberry Pi 2.

Care should be taken that accelerated fb_copyarea remains in use for
real screen area copy requests in the X server as provided by the
fbturbo driver.

This commit adds the boolean module parameter "dma_scrolling"
(bcm2708.dma_scrolling) that determines whether DMA scrolling is used
for console text scrolling. It defaults to true (1) on Raspberri Pi
models and false (0) on the Raspberry Pi 2.

When dma_scrolling is false, the FBINFO_HWACCEL_DISABLED flag is added
to the fb flags used internally in the kernel, which has the effect
that accelerated fb_copyarea is no longer used for scrolling.
Accelerated fb_copyarea can still be taken advantage of by other
applications, such as the Xorg fbturbo driver.

Signed-off-by: Harm Hanemaaijer <fgenfb@yahoo.com>
---
 drivers/video/fbdev/bcm2708_fb.c | 12 ++++++++++++
 1 file changed, 12 insertions(+)

diff --git a/drivers/video/fbdev/bcm2708_fb.c b/drivers/video/fbdev/bcm2708_fb.c
index a443666..54d5503 100644
--- a/drivers/video/fbdev/bcm2708_fb.c
+++ b/drivers/video/fbdev/bcm2708_fb.c
@@ -61,6 +61,16 @@ static u32 dma_busy_wait_threshold = 1<<15;
 module_param(dma_busy_wait_threshold, int, 0644);
 MODULE_PARM_DESC(dma_busy_wait_threshold, "Busy-wait for DMA completion below this area");
 
+#if __LINUX_ARM_ARCH__ >= 7
+/* Disable use of accelerated fb_copyarea for console scrolling by default on
+ * on Raspberry Pi 2. */
+static bool dma_scrolling = false;
+#else
+static bool dma_scrolling = true;
+#endif
+module_param(dma_scrolling, bool, 0644);
+MODULE_PARM_DESC(dma_scrolling, "Whether to use DMA copyarea for console text scrolling");
+
 /* this data structure describes each frame buffer device we find */
 
 struct fbinfo_s {
@@ -640,6 +650,8 @@ static int bcm2708_fb_register(struct bcm2708_fb *fb)
 	}
 	fb->fb.fbops = &bcm2708_fb_ops;
 	fb->fb.flags = FBINFO_FLAG_DEFAULT | FBINFO_HWACCEL_COPYAREA;
+	if (!dma_scrolling)
+		fb->fb.flags |= FBINFO_HWACCEL_DISABLED;
 	fb->fb.pseudo_palette = fb->cmap;
 
 	strncpy(fb->fb.fix.id, bcm2708_name, sizeof(fb->fb.fix.id));
-- 
1.9.1

