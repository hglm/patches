From 8e01a026af896813266587666b01fe1a21bbdad4 Mon Sep 17 00:00:00 2001
From: Harm Hanemaaijer <fgenfb@yahoo.com>
Date: Fri, 5 Jul 2013 14:46:21 +0200
Subject: [PATCH] Optimize kernel cfbfillrect function

This is an experimental, not fully tested patch to speed up the kernel
cfbfillrect function used for clearing the screen or filling an area
with a solid color.

The previous implementation was doing reads from the uncached framebuffer,
in certain circumstances, even for simple fills, which for performance
reasons, on most platforms, is ill-advised unless strictly necessary to
conform to the raster operation. In these circumstances, doing 64-bit
access on 64-bit systems does not serve much purpose except for probing
for corner-case bugs and race conditions in the hardware's framebuffer
bus implementation. On all systems, for 16bpp, it is better to take
advantage of write-combining features of the framebuffer and write a
half-word if required for the left and right edges.

Additionally, on most platforms, integer divides are relatively slow so are
best avoided, especially in inner loops.

This patch implements optimizations for 16bpp and 32bpp that avoid
framebuffer read operations during cfbfillrect if the raster-operation
is GXcopy. This applies to both 32-bit (BITS_PER_LONG) and 64-bit
systems (BITS_PER_LONG == 64). Although cfbfillrect is not usually a
bottleneck for the console text framebuffer (because regions filled
usually are aligned to a multiple of 2 or 4 x-coordinate and reads
are avoided), in some use-cases this patch could deliver a significant
speed-up.

Signed-off-by: Harm Hanemaaijer <fgenfb@yahoo.com>
---
 drivers/video/cfbfillrect.c |  155 ++++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 154 insertions(+), 1 deletion(-)

diff --git a/drivers/video/cfbfillrect.c b/drivers/video/cfbfillrect.c
index ba9f58b..4f288c3 100644
--- a/drivers/video/cfbfillrect.c
+++ b/drivers/video/cfbfillrect.c
@@ -12,6 +12,19 @@
  *  Also need to add code to deal with cards endians that are different than
  *  the native cpu endians. I also need to deal with MSB position in the word.
  *
+ * Modified by Harm Hanemaaijer (fgenfb@yahoo.com 2013):
+ *
+ * The previous implementation was doing reads from the uncached framebuffer,
+ * even for simple fills, which for performance reasons, on most platforms,
+ * is ill-advised unless strictly necessary to conform to the raster operation.
+ * In these circumstances, doing 64-bit access on 64-bit systems does not serve
+ * much purpose except for probing for corner-case bugs and race conditions in
+ * the hardware's framebuffer bus implementation. For 16bpp, it is better to
+ * take advantage of write-combining features of the framebuffer and write a
+ * half-word if required for the left and right edges.
+ *
+ * Additionally, on most platforms, integer divides are relatively slow so are
+ * best avoided, especially in inner loops.
  */
 #include <linux/module.h>
 #include <linux/string.h>
@@ -275,6 +288,130 @@ bitfill_unaligned_rev(struct fb_info *p, unsigned long __iomem *dst,
 	}
 }
 
+static void
+fast_fill16(struct fb_info *p, unsigned long __iomem *dst, int dst_idx,
+	     unsigned long pat, u32 width_in_bits, u32 height)
+{
+	for (; height--; dst_idx += p->fix.line_length * 8) {
+		u32 n;
+		unsigned long __iomem *dstp;
+		u32 last_bits;
+		dst += dst_idx >> (ffs(BITS_PER_LONG) - 1);
+		dst_idx &= (BITS_PER_LONG - 1);
+		n = width_in_bits;
+		dstp = dst;
+#if BITS_PER_LONG == 32
+		if (dst_idx) {
+			fb_writew(pat, (u16 *)dstp + 1);
+			dstp++;
+			n -= 16;
+			if (n == 0)
+				continue;
+		}
+		else if (n == 16) {
+			fb_writew(pat, (u16 *)dstp);
+			continue;
+		}	
+#else /* BITS_PER_LONG == 64 */
+		if (dst_idx) {
+			if (dst_idx == 16) {
+				fb_writew(pat, (u16 *)dstp + 1);
+				if (n == 32) {
+					fb_writew(pat, (u16 *)dstp + 2);
+					continue;
+				}
+				fb_writel(pat, (u32 *)dstp + 1);
+			}
+			else if (dst_idx == 32) {
+				if (n == 16) {
+					fb_writew(pat, (u16 *)dstp  + 2);
+					continue;
+				}
+				fb_writel(pat, (u32 *)dstp + 1);
+			}
+			else if (dst_idx == 48) {
+				fb_writew(pat, (u16 *)dstp + 3);
+			dstp++;
+			n -= 64 - dist_idx;
+			if (n == 0)
+				continue;
+		}
+#endif
+		n /= BITS_PER_LONG;
+		while (n >= 8) {
+			FB_WRITEL(pat, dstp++);
+			FB_WRITEL(pat, dstp++);
+			FB_WRITEL(pat, dstp++);
+			FB_WRITEL(pat, dstp++);
+			FB_WRITEL(pat, dstp++);
+			FB_WRITEL(pat, dstp++);
+			FB_WRITEL(pat, dstp++);
+			FB_WRITEL(pat, dstp++);
+			n -= 8;
+		}
+		while (n--)
+			FB_WRITEL(pat, dstp++);
+		last_bits = (dst_idx + width_in_bits) % BITS_PER_LONG;
+#if BITS_PER_LONG == 32
+		if (last_bits)
+			fb_writew(pat, dstp);
+#else /* BITS_PER_LONG == 64 */
+		if (last_bits & 32) {
+			fb_writel(pat, dstp);
+			if (last_bits & 16)
+				fb_writew(pat, (u16 *)dstp + 2);
+		}
+		else if (last_bits & 16)
+			fb_writew(pat, dstp);
+#endif
+	}
+}
+
+static void
+fast_fill32(struct fb_info *p, unsigned long __iomem *dst, int dst_idx,
+	     unsigned long pat, u32 width_in_bits, u32 height)
+{
+	for (; height--; dst_idx += p->fix.line_length * 8) {
+		u32 n;
+		unsigned long __iomem *dstp;
+		dst += dst_idx >> (ffs(BITS_PER_LONG) - 1);
+		dst_idx &= (BITS_PER_LONG - 1);
+		n = width_in_bits;
+		dstp = dst;
+#if BITS_PER_LONG == 64
+		if (dst_idx) {
+			fb_writel(pat, (u32 *)dstp + 1);
+			dstp++;
+			n -= 32;
+			if (n == 0)
+				continue;
+		}
+		else if (n == 32) {
+			fb_writel(pat, dstp);
+			continue;
+		}	
+#endif
+		n /= BITS_PER_LONG;
+		while (n >= 8) {
+			FB_WRITEL(pat, dstp++);
+			FB_WRITEL(pat, dstp++);
+			FB_WRITEL(pat, dstp++);
+			FB_WRITEL(pat, dstp++);
+			FB_WRITEL(pat, dstp++);
+			FB_WRITEL(pat, dstp++);
+			FB_WRITEL(pat, dstp++);
+			FB_WRITEL(pat, dstp++);
+			n -= 8;
+		}
+		while (n--)
+			FB_WRITEL(pat, dstp++);
+#if BITS_PER_LONG == 64
+		if ((dst_idx + width_in_bits) % 64)
+			fb_writel(pat, dstp);
+#endif
+	}
+}
+
 void cfb_fillrect(struct fb_info *p, const struct fb_fillrect *rect)
 {
 	unsigned long pat, pat2, fg;
@@ -299,9 +436,25 @@ void cfb_fillrect(struct fb_info *p, const struct fb_fillrect *rect)
 	dst_idx = ((unsigned long)p->screen_base & (bytes - 1))*8;
 	dst_idx += rect->dy*p->fix.line_length*8+rect->dx*bpp;
 	/* FIXME For now we support 1-32 bpp only */
-	left = bits % bpp;
 	if (p->fbops->fb_sync)
 		p->fbops->fb_sync(p);
+	/*
+         * Note: fb_be_math(p) could be used to check fb endianness, but
+         * __LITTLE_ENDIAN is used later in the function, so also use it here.
+	 */
+#if !defined(CONFIG_FB_CFB_REV_PIXELS_IN_BYTE) && defined(__LITTLE_ENDIAN)
+	if (rect->rop == ROP_COPY) {
+		if (bpp == 16) {
+			fast_fill16(p, dst, dst_idx, pat, width * 16, height);
+			return;
+		}
+		else if (bpp == 32) {
+			fast_fill32(p, dst, dst_idx, pat, width * 32, height);
+			return;
+		}
+	}
+#endif
+	left = bits % bpp;
 	if (!left) {
 		u32 bswapmask = fb_compute_bswapmask(p);
 		void (*fill_op32)(struct fb_info *p,
-- 
1.7.9.5

